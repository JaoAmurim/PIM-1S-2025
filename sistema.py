import json
import hashlib
import os

ARQUIVO_USUARIOS = 'usuarios.json'
ARQUIVO_QUIZ = 'quiz.json'

# Fun√ß√£o para limpar as informa√ß√µes do terminal
def limpar_terminal():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')

def carregar_usuarios():
    if os.path.exists(ARQUIVO_USUARIOS):
        with open(ARQUIVO_USUARIOS, 'r') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def salvar_usuarios(usuarios):
    with open(ARQUIVO_USUARIOS, 'w') as f:
        json.dump(usuarios, f, indent=4)

def hash_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()

def cadastrar():
    limpar_terminal()  # Limpa antes de cadastrar
    usuarios = carregar_usuarios()
    usuario = input("Digite um nome de usu√°rio: ")

    if usuario in usuarios:
        print("Usu√°rio j√° existe.")
        return

    senha = input("Digite uma senha: ")
    usuarios[usuario] = hash_senha(senha)
    salvar_usuarios(usuarios)
    print("Usu√°rio cadastrado com sucesso!")

def login():
    limpar_terminal()  # Limpa antes de login
    usuarios = carregar_usuarios()
    usuario = input("Digite seu nome de usu√°rio: ")
    senha = input("Digite sua senha: ")

    if usuario in usuarios and usuarios[usuario] == hash_senha(senha):
        limpar_terminal()
        print(f"\n‚úÖ Login bem-sucedido! Bem-vindo, {usuario}!")
        menu_principal(usuario)
    else:
        print("‚ùå Usu√°rio ou senha incorretos.")

def menu():
    while True:
        print("\n==== Sistema de Login ====")
        print("1. Cadastrar")
        print("2. Login")
        print("3. Sair")
        opcao = input("Escolha uma op√ß√£o: ")
        
        limpar_terminal()  # Limpa assim que escolhe a op√ß√£o

        if opcao == '1':
            cadastrar()
        elif opcao == '2':
            login()
        elif opcao == '3':
            print("Saindo...")
            break
        else:
            print("Op√ß√£o inv√°lida.")
            print(f"Voc√™ escolheu a op√ß√£o {opcao}")

def menu_principal(usuario):
    while True:
        print(f"\n=== Menu Principal (Usu√°rio: {usuario}) ===")
        print("1. Perfil")
        print("2. Mat√©rias")
        print("3. Quiz")
        print("4. Logout")

        opcao = input("Escolha uma op√ß√£o: ")
        limpar_terminal()  # Limpa ap√≥s a escolha no menu principal

        if opcao == '1':
            menu_perfil(usuario)
        elif opcao == '2':
            mostrar_conteudos_materia()
        elif opcao == '3':
            escolher_quiz(usuario)
        elif opcao == '4':
            print("üîì Logout realizado com sucesso.")
            break
        else:
            print("Op√ß√£o inv√°lida.")

def menu_perfil(usuario):
    usuarios = carregar_usuarios()
    resultados_quiz = carregar_resultados_quiz()

    while True:
        print(f"\nüîé Perfil de {usuario}")
        print("1. Exibir Informa√ß√µes do Perfil")
        print("2. Alterar Senha")
        print("3. Hist√≥rico de Quizzes")
        print("4. Voltar")

        opcao = input("Escolha uma op√ß√£o: ")
        limpar_terminal()  # Limpa ao escolher uma op√ß√£o no menu perfil

        if opcao == '1':
            exibir_informacoes(usuario, usuarios)
        elif opcao == '2':
            alterar_senha(usuario, usuarios)
        elif opcao == '3':
            exibir_historico_quizzes(usuario, resultados_quiz)
        elif opcao == '4':
            break
        else:
            print("Op√ß√£o inv√°lida.")

def exibir_informacoes(usuario, usuarios):
    if usuario in usuarios:
        print(f"Nome de Usu√°rio: {usuario}")
    else:
        print("Usu√°rio n√£o encontrado.")

# Fun√ß√£o para alterar a senha
def alterar_senha(usuario, usuarios):
    limpar_terminal()
    senha_atual = input("Digite sua senha atual: ")
    if usuarios.get(usuario) == hash_senha(senha_atual):
        nova_senha = input("Digite a nova senha: ")
        confirmar_senha = input("Confirme a nova senha: ")
        if nova_senha == confirmar_senha:
            usuarios[usuario] = hash_senha(nova_senha)
            salvar_usuarios(usuarios)
            print("Senha alterada com sucesso!")
        else:
            print("As senhas n√£o coincidem.")
    else:
        print("Senha atual incorreta.")
    input("\nPressione Enter para continuar...")
    limpar_terminal()

# Fun√ß√£o para exibir o hist√≥rico de quizzes
def exibir_historico_quizzes(usuario, resultados_quiz):
    limpar_terminal()
    if usuario in resultados_quiz:
        print(f"\nüìä Hist√≥rico de Quizzes de {usuario}:")
        for materia, resultados in resultados_quiz[usuario].items():
            print(f"\n{materia}:")
            print("=" * 50)  # Linha de separa√ß√£o para clareza
            for i, resultado in enumerate(resultados, 1):
                print(f"  Quiz {i}: {resultado} acertos")
            print("=" * 50)  # Linha de separa√ß√£o ap√≥s cada mat√©ria
    else:
        print("Voc√™ ainda n√£o realizou nenhum quiz.")
    input("\nPressione Enter para continuar...")
    limpar_terminal()

def mostrar_conteudos_materia():
    while True:
        limpar_terminal()
        print("\nüìñ Escolha a mat√©ria para estudar:")
        print("1. Pensamento L√≥gico em Python")
        print("2. Redes de Computadores")
        print("3. CiberSeguran√ßa")
        print("4. Matem√°tica")
        print("5. Voltar")
        escolha = input("Op√ß√£o: ")
        limpar_terminal()

        if escolha == '1':
            aula_pensamento_logico()
        elif escolha == '2':
            aula_redes_de_computadores()
        elif escolha == '3':
            aula_ciberseguranca()
        elif escolha == '4':
            aula_matematica()
        elif escolha == '5':
            break
        else:
            print("Op√ß√£o inv√°lida.")
            input("\nPressione Enter para continuar...")

def aula_pensamento_logico():
    while True:
        limpar_terminal()
        print("\nüìò Aula de Pensamento L√≥gico em Python - Escolha o n√≠vel:")
        print("1. F√°cil")
        print("2. M√©dio")
        print("3. Dif√≠cil")
        print("4. Voltar")
        nivel = input("N√≠vel: ")
        limpar_terminal()

        if nivel == '1':
            print("\nüîπ Pensamento L√≥gico - N√≠vel F√°cil:")
            print("- Conceitos b√°sicos de l√≥gica: vari√°veis, operadores l√≥gicos.")
            print("- Exemplo: if, else, while em Python.")
            print("- Exemplo: Operadores AND, OR, NOT.")
        elif nivel == '2':
            print("\nüî∏ Pensamento L√≥gico - N√≠vel M√©dio:")
            print("- Estruturas de repeti√ß√£o e decis√£o mais complexas.")
            print("- Exemplo: La√ßos aninhados, uso de fun√ß√µes.")
        elif nivel == '3':
            print("\nüî¥ Pensamento L√≥gico - N√≠vel Dif√≠cil:")
            print("- Algoritmos recursivos e estruturas de dados b√°sicas.")
            print("- Exemplo: Implementa√ß√£o de fun√ß√µes recursivas.")
        elif nivel == '4':
            break
        else:
            print("Op√ß√£o inv√°lida.")

        input("\nPressione Enter para voltar.")
        limpar_terminal()


def aula_redes_de_computadores():
    while True:
        limpar_terminal()
        print("\nüìô Aula de Redes de Computadores - Escolha o n√≠vel:")
        print("1. F√°cil")
        print("2. M√©dio")
        print("3. Dif√≠cil")
        print("4. Voltar")
        nivel = input("N√≠vel: ")
        limpar_terminal()

        if nivel == '1':
            print("\nüîπ Redes - N√≠vel F√°cil:")
            print("- Conceitos b√°sicos: O que √© rede, tipos de rede (LAN, WAN).")
            print("- Equipamentos b√°sicos: roteador, switch.")
        elif nivel == '2':
            print("\nüî∏ Redes - N√≠vel M√©dio:")
            print("- Protocolos comuns: TCP/IP, DHCP, DNS.")
            print("- Endere√ßamento IP e m√°scara de sub-rede.")
        elif nivel == '3':
            print("\nüî¥ Redes - N√≠vel Dif√≠cil:")
            print("- Conceitos avan√ßados: VLANs, VPNs, roteamento avan√ßado.")
            print("- Seguran√ßa em redes: firewalls, IDS/IPS.")
        elif nivel == '4':
            break
        else:
            print("Op√ß√£o inv√°lida.")

        input("\nPressione Enter para voltar.")
        limpar_terminal()


def aula_ciberseguranca():
    while True:
        limpar_terminal()
        print("\nüìó Aula de CiberSeguran√ßa - Escolha o n√≠vel:")
        print("1. F√°cil")
        print("2. M√©dio")
        print("3. Dif√≠cil")
        print("4. Voltar")
        nivel = input("N√≠vel: ")
        limpar_terminal()

        if nivel == '1':
            print("\nüîπ CiberSeguran√ßa - N√≠vel F√°cil:")
            print("- Conceitos b√°sicos: senhas seguras, autentica√ß√£o.")
            print("- Exemplo: Como criar uma senha forte.")
        elif nivel == '2':
            print("\nüî∏ CiberSeguran√ßa - N√≠vel M√©dio:")
            print("- Ataques comuns: phishing, malware.")
            print("- Como proteger sistemas contra ataques.")
        elif nivel == '3':
            print("\nüî¥ CiberSeguran√ßa - N√≠vel Dif√≠cil:")
            print("- Criptografia, firewalls avan√ßados e pol√≠ticas de seguran√ßa.")
            print("- Exemplo: Uso de VPN, an√°lise de logs de seguran√ßa.")
        elif nivel == '4':
            break
        else:
            print("Op√ß√£o inv√°lida.")

        input("\nPressione Enter para voltar.")
        limpar_terminal()


def aula_matematica():
    while True:
        limpar_terminal()
        print("\nüìò Aula de Matem√°tica - Escolha o n√≠vel:")
        print("1. F√°cil")
        print("2. M√©dio")
        print("3. Dif√≠cil")
        print("4. Voltar")
        nivel = input("N√≠vel: ")
        limpar_terminal()

        if nivel == '1':
            print("\nüîπ Matem√°tica - N√≠vel F√°cil:")
            print("- Opera√ß√µes b√°sicas: Adi√ß√£o (+), Subtra√ß√£o (-), Multiplica√ß√£o (x), Divis√£o (√∑)")
            print("- Exemplo de adi√ß√£o: 7 + 3 = 10")
            print("- Exemplo de subtra√ß√£o: 10 - 4 = 6")
            print("- Exemplo de multiplica√ß√£o: 5 x 2 = 10")
            print("- Exemplo de divis√£o: 8 √∑ 2 = 4")
        elif nivel == '2':
            print("\nüî∏ Matem√°tica - N√≠vel M√©dio:")
            print("- Express√µes num√©ricas com par√™nteses e ordem de opera√ß√µes.")
            print("- Primeiro resolvemos par√™nteses, depois multiplica√ß√µes/divis√µes, e por √∫ltimo somas/subtra√ß√µes.")
            print("- Exemplo: (3 + 2) x 4 = 20")
            print("- Exemplo: 5 + 2 x 3 = 11 (multiplica primeiro: 2 x 3 = 6, depois soma: 5 + 6 = 11)")
        elif nivel == '3':
            print("\nüî¥ Matem√°tica - N√≠vel Dif√≠cil:")
            print("- Potencia√ß√£o: multiplicar um n√∫mero por ele mesmo v√°rias vezes.")
            print("- Raiz quadrada: descobrir qual n√∫mero multiplicado por ele mesmo d√° aquele valor.")
            print("- Problemas com v√°rias etapas.")
            print("- Exemplo de pot√™ncia: 2¬≥ = 2 x 2 x 2 = 8")
            print("- Exemplo de raiz quadrada: ‚àö81 = 9")
        elif nivel == '4':
            break
        else:
            print("Op√ß√£o inv√°lida.")

        input("\nPressione Enter para voltar.")
        limpar_terminal()

def escolher_quiz(usuario):
    limpar_terminal()
    print("\nüß† Escolha a mat√©ria do Quiz:")
    print("1. Pensamento L√≥gico em Python")
    print("2. Redes de Computadores")
    print("3. CiberSeguran√ßa")
    print("4. Matem√°tica")
    print("5. Voltar")

    escolha = input("Digite o n√∫mero da mat√©ria: ")
    limpar_terminal()

    if escolha == '1':
        escolher_dificuldade("Pensamento L√≥gico em Python", usuario)
    elif escolha == '2':
        escolher_dificuldade("Redes de Computadores", usuario)
    elif escolha == '3':
        escolher_dificuldade("CiberSeguran√ßa", usuario)
    elif escolha == '4':
        escolher_dificuldade("Matem√°tica", usuario)
    elif escolha == '5':
        return
    else:
        print("Op√ß√£o inv√°lida.")
        input("\nPressione Enter para continuar...")
        limpar_terminal()

def quiz_pensamento_logico(usuario, dificuldade):
    if dificuldade == "F√°cil":
        perguntas = [
            ("O que significa 'if' em Python?", "se"),
            ("Como se cria uma vari√°vel em Python?", "nome_da_variavel = valor"),
            ("Qual operador representa 'e' l√≥gico?", "and"),
            ("Qual comando usamos para mostrar algo na tela?", "print"),
            ("Qual s√≠mbolo indica coment√°rio em Python?", "#")
        ]
    elif dificuldade == "M√©dio":
        perguntas = [
            ("Como se faz um loop que repete 5 vezes?", "for i in range(5):"),
            ("Qual √© a sa√≠da de: print(2 + 3 * 4)?", "14"),
            ("O que faz a fun√ß√£o 'len()'?", "retorna o tamanho"),
            ("Como voc√™ define uma fun√ß√£o em Python?", "def nome_funcao():"),
            ("Qual estrutura condicional verifica m√∫ltiplas condi√ß√µes?", "elif")
        ]
    elif dificuldade == "Dif√≠cil":
        perguntas = [
            ("O que √© uma lista em Python?", "uma cole√ß√£o ordenada"),
            ("Explique o conceito de 'recurs√£o'.", "fun√ß√£o que chama a si mesma"),
            ("Como capturar exce√ß√µes em Python?", "try e except"),
            ("Para que serve o 'lambda'?", "fun√ß√£o an√¥nima"),
            ("O que significa 'PEP 8'?", "guia de estilo para Python")
        ]
    executar_quiz(perguntas, "Pensamento L√≥gico em Python", usuario, dificuldade)


def quiz_redes_computadores(usuario, dificuldade):
    if dificuldade == "F√°cil":
        perguntas = [
            ("O que √© um endere√ßo IP?", "identifica√ß√£o de um dispositivo"),
            ("Qual o protocolo usado para navegar na web?", "HTTP"),
            ("O que significa Wi-Fi?", "conex√£o sem fio"),
            ("O que √© um roteador?", "dispositivo que encaminha pacotes"),
            ("Qual a fun√ß√£o do DNS?", "resolver nomes para IP")
        ]
    elif dificuldade == "M√©dio":
        perguntas = [
            ("O que faz o protocolo TCP?", "controle de conex√£o confi√°vel"),
            ("Qual a diferen√ßa entre LAN e WAN?", "LAN √© rede local, WAN √© rede ampla"),
            ("O que √© uma m√°scara de sub-rede?", "divide redes em sub-redes"),
            ("Explique o que √© DHCP.", "atribui IPs automaticamente"),
            ("Qual porta padr√£o do HTTPS?", "443")
        ]
    elif dificuldade == "Dif√≠cil":
        perguntas = [
            ("O que √© NAT?", "tradu√ß√£o de endere√ßos de rede"),
            ("Qual o protocolo para transfer√™ncia segura de arquivos?", "SFTP"),
            ("O que √© um ataque DoS?", "nega√ß√£o de servi√ßo"),
            ("Explique o que √© VLAN.", "rede local virtual"),
            ("O que faz o protocolo ICMP?", "controle e mensagens de erro")
        ]
    executar_quiz(perguntas, "Redes de Computadores", usuario, dificuldade)


def quiz_ciberseguranca(usuario, dificuldade):
    if dificuldade == "F√°cil":
        perguntas = [
            ("O que √© um v√≠rus de computador?", "programa malicioso"),
            ("Para que serve uma senha forte?", "proteger contas"),
            ("O que √© phishing?", "golpe por e-mail ou mensagem"),
            ("O que significa HTTPS?", "protocolo seguro para web"),
            ("O que √© firewall?", "prote√ß√£o para a rede")
        ]
    elif dificuldade == "M√©dio":
        perguntas = [
            ("O que √© autentica√ß√£o multifator?", "mais de uma forma de verifica√ß√£o"),
            ("Explique o que √© ransomware.", "sequestro de dados para pedir resgate"),
            ("Para que serve a criptografia?", "proteger dados"),
            ("O que √© engenharia social?", "manipula√ß√£o para obter informa√ß√µes"),
            ("O que √© um certificado digital?", "identifica√ß√£o segura na internet")
        ]
    elif dificuldade == "Dif√≠cil":
        perguntas = [
            ("O que √© um ataque de for√ßa bruta?", "tentativa exaustiva de senhas"),
            ("Explique o conceito de 'zero trust'.", "n√£o confiar em nada dentro ou fora da rede"),
            ("O que √© um exploit?", "c√≥digo que aproveita vulnerabilidades"),
            ("Para que serve o protocolo SSL/TLS?", "seguran√ßa na comunica√ß√£o"),
            ("O que √© um worm?", "v√≠rus que se replica sozinho")
        ]
    executar_quiz(perguntas, "CiberSeguran√ßa", usuario, dificuldade)


def quiz_matematica(usuario, dificuldade):
    if dificuldade == "F√°cil":
        perguntas = [
            ("Quanto √© 2 + 2?", "4"),
            ("Quanto √© 5 - 3?", "2"),
            ("Quanto √© 3 + 1?", "4"),
            ("Quanto √© 6 x 1?", "6"),
            ("Quanto √© 9 √∑ 3?", "3")
        ]
    elif dificuldade == "M√©dio":
        perguntas = [
            ("Quanto √© 7 + 5?", "12"),
            ("Quanto √© 9 x 6?", "54"),
            ("Quanto √© 81 dividido por 9?", "9"),
            ("Quanto √© 15 - 7?", "8"),
            ("Quanto √© 8 x 7?", "56")
        ]
    elif dificuldade == "Dif√≠cil":
        perguntas = [
            ("Quanto √© a raiz quadrada de 144?", "12"),
            ("Qual o resultado de (3^3) + 1?", "28"),
            ("Quanto √© 100 dividido por 2 vezes 3?", "150"),
            ("Qual o valor de 2 elevado a 5?", "32"),
            ("Quanto √© 45% de 200?", "90")
        ]
    executar_quiz(perguntas, "Matem√°tica", usuario, dificuldade)


def escolher_dificuldade(materia, usuario):
    limpar_terminal()
    print(f"\nüìà Escolha a dificuldade de {materia}:")
    print("1. F√°cil")
    print("2. M√©dio")
    print("3. Dif√≠cil")
    print("4. Voltar")

    escolha = input("Digite o n√∫mero da dificuldade: ")
    limpar_terminal()

    if escolha == '1':
        dificuldade = "F√°cil"
    elif escolha == '2':
        dificuldade = "M√©dio"
    elif escolha == '3':
        dificuldade = "Dif√≠cil"
    elif escolha == '4':
        return
    else:
        print("Op√ß√£o inv√°lida.")
        input("\nPressione Enter para continuar...")
        limpar_terminal()
        return

    if materia == "Pensamento L√≥gico em Python":
        quiz_pensamento_logico(usuario, dificuldade)
    elif materia == "Redes de Computadores":
        quiz_redes_computadores(usuario, dificuldade)
    elif materia == "CiberSeguran√ßa":
        quiz_ciberseguranca(usuario, dificuldade)
    elif materia == "Matem√°tica":
        quiz_matematica(usuario, dificuldade)
    else:
        print("Mat√©ria n√£o encontrada.")
        input("\nPressione Enter para continuar...")

import time  # se ainda n√£o estiver no topo

def executar_quiz(perguntas, materia, usuario, dificuldade):
    limpar_terminal()
    print(f"\nüìò Quiz de {materia} - {dificuldade}")
    acertos = 0

    for i, (pergunta, resposta_certa) in enumerate(perguntas, 1):
        resposta = input(f"{i}. {pergunta} ").strip().lower()
        print("‚è≥ Verificando resposta...")
        time.sleep(1.5)

        if resposta == resposta_certa.lower():
            print("‚úÖ Correto!")
            acertos += 1
        else:
            print(f"‚ùå Errado. A resposta certa era: {resposta_certa}")
        time.sleep(1)

    print("\nüìä Calculando resultado...")
    time.sleep(2)
    print(f"\nüéâ Voc√™ acertou {acertos} de {len(perguntas)} perguntas em {materia} - {dificuldade}!")

    input("\nPressione Enter para continuar...")
    limpar_terminal()

    registrar_resultado(usuario, f"{materia} - {dificuldade}", acertos)

# Fun√ß√£o para carregar dados dos quizzes
def carregar_resultados_quiz():
    if os.path.exists(ARQUIVO_QUIZ):
        with open(ARQUIVO_QUIZ, 'r') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

# Fun√ß√£o para salvar dados dos quizzes
def salvar_resultados_quiz(resultados):
    with open(ARQUIVO_QUIZ, 'w') as f:
        json.dump(resultados, f, indent=4)

# Fun√ß√£o para registrar um resultado no arquivo
def registrar_resultado(usuario, materia, pontuacao):
    resultados = carregar_resultados_quiz()
    if usuario not in resultados:
        resultados[usuario] = {}
    if materia not in resultados[usuario]:
        resultados[usuario][materia] = []
    resultados[usuario][materia].append(pontuacao)
    salvar_resultados_quiz(resultados)


# Iniciar o programa
menu()